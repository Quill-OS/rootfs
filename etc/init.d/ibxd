#!/sbin/openrc-run

description="InkBox Daemon (ibxd) permits the execution of certain actions as an unpriviledged user and/or from a chroot environment."

depend() {
	keyword -prefix -lxc
}

bookconfig_mount() {
	mount --bind "${BOOK_CSUM_DIR}" /kobo/mnt/onboard/.adds/inkbox/.config
	# Exceptions
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/04-book
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/06-words
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/07-words_number
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/08-recent_books
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/11-menubar
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/12-lockscreen
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/13-epub_page_size
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/14-reader_scrollbar
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/18-encrypted_storage
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/19-timezone
	mkdir -p /kobo/mnt/onboard/.adds/inkbox/.config/20-sleep_daemon

	touch /data/config/04-book/refresh && mount --bind /data/config/04-book/refresh /kobo/mnt/onboard/.adds/inkbox/.config/04-book/refresh
	mount --bind /data/config/06-words /kobo/mnt/onboard/.adds/inkbox/.config/06-words
	mount --bind /data/config/07-words_number /kobo/mnt/onboard/.adds/inkbox/.config/07-words_number
	mount --bind /data/config/08-recent_books /kobo/mnt/onboard/.adds/inkbox/.config/08-recent_books
	mount --bind /data/config/11-menubar /kobo/mnt/onboard/.adds/inkbox/.config/11-menubar
	mount --bind /data/config/12-lockscreen /kobo/mnt/onboard/.adds/inkbox/.config/12-lockscreen
	mount --bind /data/config/13-epub_page_size /kobo/mnt/onboard/.adds/inkbox/.config/13-epub_page_size
	mount --bind /data/config/14-reader_scrollbar /kobo/mnt/onboard/.adds/inkbox/.config/14-reader_scrollbar
	mount --bind /data/config/18-encrypted_storage /kobo/mnt/onboard/.adds/inkbox/.config/18-encrypted_storage
	mount --bind /data/config/19-timezone /kobo/mnt/onboard/.adds/inkbox/.config/19-timezone
	mount --bind /data/config/20-sleep_daemon /kobo/mnt/onboard/.adds/inkbox/.config/20-sleep_daemon
	echo "true" > /kobo/inkbox/bookConfigSetUp
}

start() {
	ebegin "Starting InkBox Daemon (ibxd)"

	mkfifo /run/ibxd 2>/dev/null
	umount /kobo/opt/ibxd -l -f 2>/dev/null
	umount /xorg/opt/ibxd -l -f 2>/dev/null

	touch /xorg/opt/ibxd 2>/dev/null
	mount --bind /run/ibxd /kobo/opt/ibxd 2>/dev/null
	mount --bind /run/ibxd /xorg/opt/ibxd 2>/dev/null

	while true
	do
		if read line < /run/ibxd; then
			if [[ "$line" == "sleep_toggle" ]]; then
				echo "state changed" > /tmp/power
			elif [[ "$line" == "reboot" ]]; then
				/sbin/reboot
			elif [[ "$line" == "reboot splash reset_kobox" ]]; then
				/sbin/reboot splash reset_kobox
			elif [[ "$line" == "reboot no_splash reset_kobox" ]]; then
				/sbin/reboot no_splash reset_kobox
			elif [[ "$line" == "reboot no_splash" ]]; then
				/sbin/reboot no_splash

			elif [[ "$line" == "poweroff" ]]; then
				/sbin/poweroff
			elif [[ "$line" == "poweroff no_splash" ]]; then
				/sbin/poweroff no_splash


			elif [[ "$line" == "qt_stop_gui" ]]; then
				rc-service inkbox_gui stop
			elif [[ "$line" == "qt_start_gui" ]]; then
				rc-service inkbox_gui start
			elif [[ "$line" == "x_start_gui" ]]; then
				rc-service xorg start
			elif [[ "$line" == "x_stop_gui" ]]; then
				rc-service xorg stop
			elif [[ "$line" == "app_start_vnc" ]]; then
				rc-service inkbox_gui stop
				/usr/local/bin/appvnc_start.sh &

			# Wi-Fi things
			elif [[ "$line" == "list_wifi_networks" ]]; then
				/usr/local/bin/wifi/list_networks &
			elif [[ "$line" == "connect_to_wifi_network" ]]; then
				NET_ESSID=$(cat /kobo/run/wifi_network_essid)
				NET_PASSPHRASE=$(cat /kobo/run/wifi_network_passphrase)
				rm -f /kobo/run/wifi_network_essid
				rm -f /kobo/run/wifi_network_passphrase
				/usr/local/bin/wifi/connection_manager.sh "${NET_ESSID}" "${NET_PASSPHRASE}" &
			elif [[ "$line" == "stop_wifi_operations" ]]; then
				/usr/local/bin/wifi/prepare_changing_wifi.sh &
			elif [[ "$line" == "toggle_wifi_off" ]]; then
				/usr/local/bin/wifi/toggle.sh off &
			elif [[ "$line" == "toggle_wifi_on" ]]; then
				/usr/local/bin/wifi/turn_on_with_stats.sh &
			elif [[ "$line" == "get_current_wifi_name" ]]; then
				iwgetid -r > /run/current_wifi_name &
			elif [[ "$line" == "get_wifi_information" ]]; then
				/usr/local/bin/wifi/wifi_information.sh &

			elif [[ "$line" == "ota_update_check" ]]; then
				/usr/local/bin/ota_update.sh
			elif [[ "$line" == "ota_update_download" ]]; then
				/usr/local/bin/ota_update.sh download
			elif [[ "$line" == "bookconfig_mount" ]]; then
				BOOK_FILE_RAW=$(cat /kobo/tmp/inkboxBookPath)
				BOOK_FILE="/kobo${BOOK_FILE_RAW}"
				BOOK_CSUM=$(sha256sum "${BOOK_FILE}" | awk '{ print $1 }')
				BOOK_CSUM_DIR="/data/onboard/.${BOOK_CSUM}"
				sync
				umount -l -f /kobo/mnt/onboard/.adds/inkbox/.config
				if [ -e "${BOOK_CSUM_DIR}" ]; then
					bookconfig_mount
				else
					mkdir -p "${BOOK_CSUM_DIR}"
					cp -r /opt/config/* "${BOOK_CSUM_DIR}"
					bookconfig_mount
				fi
			elif [[ "$line" == "bookconfig_unmount" ]]; then
				sync
				umount -l -f /kobo/mnt/onboard/.adds/inkbox/.config
				mount --bind /opt/config /kobo/mnt/onboard/.adds/inkbox/.config
			elif [[ "$line" == "onboard_mount" ]]; then
				rc-service onboard_mount start
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/onboard_mounted
				else
					echo "false" > /kobo/tmp/onboard_mounted
				fi
			elif [[ "$line" == "onboard_unmount" ]]; then
				rc-service onboard_mount stop
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/onboard_unmounted
				else
					echo "false" > /kobo/tmp/onboard_unmounted
				fi
			elif [[ "$line" == "kobox_extensions_storage_unmount" ]]; then
				sync
				umount -l -f /opt/X11/extensions-user
			elif [[ "$line" == "ibxd_stop" ]]; then
				break
			elif [[ "$line" == "usbnet_start" ]]; then
				rc-service usbnet start
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/usbnet_started
				else
					echo "false" > /kobo/tmp/usbnet_started
				fi
			elif [[ "$line" == "usbnet_stop" ]]; then
				rc-service usbnet stop
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/usbnet_stopped
				else
					echo "false" > /kobo/tmp/usbnet_stopped
				fi
			elif [[ "$line" == "update_inkbox_restart" ]]; then
				rc-service update_inkbox restart
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/update_inkbox_restarted
				else
					echo "false" > /kobo/tmp/update_inkbox_restarted
				fi
			elif [[ "$line" == "inkbox_splash" ]]; then
				rc-service splash restart
			elif [[ "$line" == "netsurf_launch" ]]; then
				su -s /bin/sh -c "env DISPLAY=:0 chroot /xorg /bin/netsurf-gtk2"
				echo "stop" > /xorg/tmp/netsurf-fifo
			elif [[ "$line" == "encfs_restart" ]]; then
				rc-service encfs restart
			elif [[ "$line" == "encfs_stop" ]]; then
				rc-service encfs stop
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/tmp/encfs_stopped
				else
					echo "false" > /kobo/tmp/encfs_stopped
				fi
			elif [[ "$line" == "gutenberg_sync" ]]; then
				/usr/local/bin/gutenberg/fetch_catalog.sh
				if [ ${?} == 0 ]; then
					/usr/local/bin/gutenberg/get_latest_books.sh
					if [ ${?} == 0 ]; then
						echo "true" > /kobo/inkbox/gutenbergSyncDone
					else
						echo "false" > /kobo/inkbox/gutenbergSyncDone
					fi
				else
					echo "false" > /kobo/inkbox/gutenbergSyncDone
				fi
			elif [[ "$line" == "gutenberg_search" ]]; then
				SEARCH_TERM=$(cat /kobo/inkbox/gutenberg_search_request)
				/usr/local/bin/gutenberg/search_catalog.sh "${SEARCH_TERM}"
			elif [[ "$line" == "gutenberg_get_book" ]]; then
				BOOK_ID=$(cat /kobo/inkbox/gutenberg/bookid)
				BOOK_TITLE=$(cat /kobo/inkbox/gutenberg/booktitle)
				/usr/local/bin/gutenberg/get_book.sh "${BOOK_ID}" no_cover "${BOOK_TITLE}"
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/inkbox/gutenberg/getBookDone
				else
					echo "false" > /kobo/inkbox/gutenberg/getBookDone
				fi
			elif [[ "$line" == "gutenberg_get_cover" ]]; then
				BOOK_ID=$(cat /kobo/inkbox/gutenberg/bookid)
				/usr/local/bin/gutenberg/get_book.sh "${BOOK_ID}" cover
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/inkbox/gutenberg/getCoverDone
				else
					echo "false" > /kobo/inkbox/gutenberg/getCoverDone
				fi
			elif [[ "$line" == "inkbox_convert_image" ]]; then
				IMAGE_PATH=$(cat /kobo/tmp/inkboxImagePath)
				magick "/kobo${IMAGE_PATH}" /kobo/run/image.png
				if [ ${?} == 0 ]; then
					echo true > /kobo/inkbox/convertImageDone
				else
					echo false > /kobo/inkbox/convertImageDone
				fi
			elif [[ "$line" == "generate_system_report" ]]; then
				/usr/local/bin/generate_system_report.sh
				if [ ${?} == 0 ]; then
					echo "true" > /kobo/inkbox/systemReportDone
				else
					echo "false" > /kobo/inkbox/systemReportDone
				fi
			elif [[ "$line" == "gui_remount_localtime" ]]; then
				umount /kobo/etc/localtime
				mount --bind /data/config/19-timezone/config /kobo/etc/localtime
			elif [[ "$line" == "get_pdf_orientation" ]]; then
				PDF_FILE="/kobo/$(cat /kobo/inkbox/pdf_orientation_file_request)"
				rm -f "/kobo/inkbox/pdf_orientation_file_request"
				PDF_WIDTH="$(pdfinfo "${PDF_FILE}" | grep "Page.* size:" | sed 's/Page size:      //g' | sed 's/(.*//g' | sed 's/pts//g' | tr -d " " | sed 's/.*x//g')"
				PDF_HEIGHT="$(pdfinfo "${PDF_FILE}" | grep "Page.* size:" | sed 's/Page size:      //g' | sed 's/(.*//g' | sed 's/pts//g' | tr -d " " | sed 's/x.*//g')"
				if [ "$(echo "${PDF_HEIGHT}/1" | bc)" -gt "$(echo "${PDF_WIDTH}/1" | bc)" ]; then
					echo "Landscape" > /kobo/inkbox/pdf_orientation_result
				else
					echo "Portrait" > /kobo/inkbox/pdf_orientation_result
				fi
			elif [[ "$line" == "gui_apps_start" ]]; then
				rc-service gui_apps start
				if [ ${?} == 0 ]; then
					echo true > /kobo/tmp/gui_apps_started
				else
					echo false > /kobo/tmp/gui_apps_started
				fi
			elif [[ "$line" == "gui_apps_stop" ]]; then
				rc-service gui_apps stop
				if [ ${?} == 0 ]; then
					echo true > /kobo/tmp/gui_apps_stopped
				else
					echo false > /kobo/tmp/gui_apps_stopped
				fi
			elif [[ "$line" == "gui_soft_start" ]]; then
				/usr/bin/inkbox.sh
			fi
		fi
	done &
	eend $?
}

stop() {
	echo "ibxd_stop" > /run/ibxd
}
