#!/sbin/openrc-run

description="Starts InkBox GUI"

depend() {
	after update_inkbox
	keyword -prefix -lxc
}

write_device_ID() {
	KERNEL_VERSION="$(uname -r)"
	if [ "${DEVICE}" == "n705" ]; then
		DEVICE_ID=340
	elif [ "${DEVICE}" == "n905b" ]; then
		DEVICE_ID=310
	elif [ "${DEVICE}" == "n905c" ]; then
		DEVICE_ID=320
	elif [ "${DEVICE}" == "n613" ]; then
		DEVICE_ID=330
	elif [ "${DEVICE}" == "n236" ]; then
		DEVICE_ID=375
	elif [ "${DEVICE}" == "n437" ]; then
		DEVICE_ID=371
	elif [ "${DEVICE}" == "n306" ]; then
		DEVICE_ID=382
	elif [ "${DEVICE}" == "n249" ]; then
		DEVICE_ID=376
	elif [ "${DEVICE}" == "n873" ]; then
		DEVICE_ID=384
	elif [ "${DEVICE}" == "n418" ]; then
		DEVICE_ID=388
	fi
	VERSION="$(cat /opt/inkbox_device | tr [:lower:] [:upper:])000000000,${KERNEL_VERSION},$(cat /opt/version),${KERNEL_VERSION},${KERNEL_VERSION},00000000-0000-0000-0000-000000000${DEVICE_ID}"

	if [ "$(cat /kobo/mnt/onboard/.kobo/version)" != "${VERSION}" ]; then
		echo -n "${VERSION}" > "/kobo/mnt/onboard/.kobo/version"
	fi
}

start() {
	ebegin "Starting InkBox GUI"
	DEVICE=$(cat /opt/inkbox_device)
	EXIT_SIGN_FAILURE=0

	rc-service xorg stop 2>/dev/null

	umount -l -f /kobo 2>/dev/null
	mkdir -p /opt/gui_rootfs/write /opt/gui_rootfs/read
	unionfs -o cow,nonempty,nosuid,allow_other /opt/gui_rootfs/write=RW:/opt/gui_rootfs/read=RO /kobo

	rc-service ibxd restart
	squashfuse -o allow_other,nosuid /opt/update/update.isa /opt/isa

	DEVMODE=$(cat /opt/developer/key/valid-key 2>/dev/null)
	if [ "${DEVMODE}" == "true" ]; then
		echo "developer_fake-openssl_mount" > /run/initrd-fifo
	fi
	for f in /opt/isa/*.isa; do
		if [ "${f}" != "/opt/isa/gui_rootfs.isa" ]; then
			openssl dgst -sha256 -verify /opt/key/public.pem -signature "${f}.dgst" "${f}" &>/dev/null
			if [ "${?}" != 0 ]; then
				EXIT_SIGN_FAILURE=1
				break
			fi
		fi
	done
	if [ "${DEVMODE}" == "true" ]; then
		echo "developer_fake-openssl_unmount" > /run/initrd-fifo
	fi

	if [ "${EXIT_SIGN_FAILURE}" == 0 ]; then
		mount --bind /etc/passwd /kobo/etc/passwd
		mkdir -p /kobo/mnt/onboard/.adds/inkbox /kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo /kobo/mnt/onboard/.adds/.koreader_write /kobo/mnt/onboard/.adds/.koreader_read /kobo/mnt/onboard/.adds/koreader
		squashfuse -o allow_other,nosuid /opt/isa/inkbox.isa /kobo/mnt/onboard/.adds/inkbox
		mount --bind /opt/config /kobo/mnt/onboard/.adds/inkbox/.config
		squashfuse -o allow_other,nosuid /opt/isa/qt.isa /kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo
		if [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "n249" ] || [ "${DEVICE}" == "n418" ]; then
			mount --bind /lib/qt5-plugins/libkobo.so.2 /kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo/plugins/platforms/libkobo.so
		elif [ "${DEVICE}" == "kt" ]; then
			mount --bind /lib/qt5-plugins/libkobo.so.3 /kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo/plugins/platforms/libkobo.so
		else
			mount --bind /lib/qt5-plugins/libkobo.so.1 /kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo/plugins/platforms/libkobo.so
		fi
		if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "kt" ]; then
			mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss /kobo/mnt/onboard/.adds/inkbox/eink.qss
		elif [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "emu" ]; then
			mount --bind /usr/local/share/inkbox/stylesheets/eink-768x1024.qss /kobo/mnt/onboard/.adds/inkbox/eink.qss
		elif [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n249" ]; then
			mount --bind /usr/local/share/inkbox/stylesheets/eink-1072x1448.qss /kobo/mnt/onboard/.adds/inkbox/eink.qss
		elif [ "${DEVICE}" == "n873" ] || [ "${DEVICE}" == "n418" ]; then
			mount --bind /usr/local/share/inkbox/stylesheets/eink-1264x1680.qss /kobo/mnt/onboard/.adds/inkbox/eink.qss
		else
			mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss /kobo/mnt/onboard/.adds/inkbox/eink.qss
		fi
		# KOReader + unionfs framework
		mount -t tmpfs tmpfs -o size=16M /kobo/mnt/onboard/.adds/.koreader_write
		squashfuse -o allow_other,nosuid /opt/isa/koreader.isa /kobo/mnt/onboard/.adds/.koreader_read
		unionfs -o cow,nonempty,nosuid,allow_other /kobo/mnt/onboard/.adds/.koreader_write=RW:/kobo/mnt/onboard/.adds/.koreader_read=RO /kobo/mnt/onboard/.adds/koreader
		cp -r /usr/local/share/koreader-overlay/* /kobo/mnt/onboard/.adds/koreader
		mkdir -p /kobo/mnt/onboard/.kobo/Kobo && touch "/kobo/mnt/onboard/.kobo/Kobo/Kobo eReader.conf"

	        mount -t sysfs sysfs /kobo/sys
	        mount -t proc proc /kobo/proc
	        mount -t tmpfs tmpfs -o size=128M /kobo/tmp
	        mount -t tmpfs tmpfs -o size=128M /kobo/var/run
		mount --bind /dev /kobo/dev
	        mount --bind /dev/pts /kobo/dev/pts
		chown -R user:user /kobo/dev/fb0 /kobo/dev/ntx_io /kobo/opt/ibxd /kobo/sys/class/graphics/fb0/ /kobo/sys/class/backlight/*/* /sys/class/leds/*/*
		if [ "${DEVICE}" != "n418" ]; then
			mkdir -p /kobo/dev/ipd && mount --bind /run/ipd /kobo/dev/ipd
		fi

		mount --bind / /kobo/external_root
		mount --bind /dev /kobo/external_root/dev
		mount --bind /dev/pts /kobo/external_root/dev/pts
		mount --bind /proc /kobo/external_root/proc
		mount --bind /tmp /kobo/external_root/tmp
		mount --bind /run /kobo/external_root/run
		mount --rbind /var /kobo/external_root/var
		mount --bind /opt/isa /kobo/external_root/opt/isa
		mount --bind /opt/root /kobo/external_root/opt/root
		mount --bind /opt/update /kobo/external_root/opt/update
		mount --bind /opt/storage /kobo/external_root/opt/storage
		[ ! -e "/kobo/opt/version" ] && touch /kobo/opt/version
		[ ! -e "/kobo/bin/kobo_config.sh" ] && touch /kobo/bin/kobo_config.sh
		[ ! -e "/kobo/usr/share/zoneinfo" ] && mkdir -p /kobo/usr/share/zoneinfo
		[ ! -e "/kobo/etc/localtime" ] && touch /kobo/etc/localtime
		[ ! -e "/data/config/19-timezone" ] && mkdir -p /data/config/19-timezone
		[ ! -e "/data/config/19-timezone/config" ] && ln -sf /usr/share/zoneinfo/UTC /data/config/19-timezone/config
		mount --bind /usr/share/zoneinfo /kobo/usr/share/zoneinfo
		mount --bind /data/config/19-timezone/config /kobo/etc/localtime
		mount --bind /opt/version /kobo/opt/version
		mount --bind /bin/kobo_config.sh /kobo/bin/kobo_config.sh
		mount --bind /opt/bin/fbink/fbink /kobo/external_root/opt/bin/fbink/fbink
		if [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ]; then
			echo "n905" > /tmp/inkbox_device
			mount --bind /tmp/inkbox_device /kobo/opt/inkbox_device
		elif [ "${DEVICE}" == "n418" ]; then
			echo "n873" > /tmp/inkbox_device
			mount --bind /tmp/inkbox_device /kobo/opt/inkbox_device
		else
			mount --bind /opt/inkbox_device /kobo/opt/inkbox_device
		fi
		mount --bind /opt/inkbox_device /kobo/external_root/opt/inkbox_device
		mount --bind /opt/X11/extensions_folders_list /kobo/external_root/opt/X11/extensions_folders_list
		mount --bind /opt/X11/extensions_list /kobo/external_root/opt/X11/extensions_list
		mount --bind /opt/X11/nographic_extensions_folders_list /kobo/external_root/opt/X11/nographic_extensions_folders_list
		mount --bind /opt/X11/nographic_extensions_list /kobo/external_root/opt/X11/nographic_extensions_list

		mount --bind /boot /kobo/external_root/boot
		mount --bind /lib/modules /kobo/external_root/lib/modules

		touch /kobo/tmp/resolv.conf
		mount --bind /etc/resolv.conf /kobo/tmp/resolv.conf

		FLASHCARDS_FILE="/data/onboard/flashcards.sqsh"
		FLASHCARDS_MOUNT_DIRECTORY="/data/onboard/.flashexam"
		[ -e "${FLASHCARDS_FILE}" ] && mkdir -p "${FLASHCARDS_MOUNT_DIRECTORY}" && squashfuse -o nonempty "${FLASHCARDS_FILE}" "${FLASHCARDS_MOUNT_DIRECTORY}"

		if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n873" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "n249" ] || [ "${DEVICE}" == "n418" ]; then
			echo "true" > /kobo/run/wifi_able
			echo "true" > /run/wifi_able
		else
			# Emulator or Kindle Touch (KT)
			echo "false" > /kobo/run/wifi_able
			echo "false" > /run/wifi_able
		fi

		write_device_ID

		# Also important: remount_tmpfs_launch.sh
		service udev restart
		udevadm control --reload
		udevadm control --reload-rules
		if [ "${DEVICE}" == "kt" ]; then
			echo "true" > /run/power_button_cancel
		fi
		udevadm trigger

		ln -s /external_root/run/udev/ /kobo/run/udev

		rc-service gui_apps restart

		if [ "${DEVICE}" == "n418" ]; then
			while true; do
				if [ -e "/dev/input/origin" ] && ! grabcheck /dev/input/origin/event0; then
					rc-service ipd stop
					rc-service ipd start
					(sleep 10 && mkdir -p /kobo/dev/ipd && mount --bind /run/ipd /kobo/dev/ipd) &
					break
				fi
				mkdir -p /kobo/dev/ipd && mount --bind /run/ipd /kobo/dev/ipd
				break
			done
		fi
		/usr/bin/inkbox.sh
	else
		echo "UI bundle signature verification failed! Aborting launch ..."
		echo "6" > /run/alert_splash_error_code
		echo "alert_splash" > /run/initrd-fifo
		/sbin/poweroff no_splash
	fi

	eend $?
}
stop() {
	ebegin "Stopping InkBox GUI"
	killall -q inkbox inkbox-bin oobe-inkbox oobe-inkbox-bin lockscreen lockscreen-bin inkbox.sh scribble lightmaps qalculate qalculate-bin calculator calculator-bin qreversi qreversi-bin 2048 2048-bin koreader.sh luajit

	rc-service gui_apps stop
	umount -l -f /kobo 2>/dev/null
	umount -l -f /opt/isa 2>/dev/null

	eend $?
}
