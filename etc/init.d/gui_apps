#!/sbin/openrc-run

description="Sets InkBox GUI user apps up"

depend() {
	keyword -prefix -lxc
	after onboard_mount ipd
}

calculate() {
        awk "BEGIN { print "$*" }";
}

bind_mount_stylesheet() {
	if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "kt" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "emu" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-768x1024.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n249" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-1072x1448.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n873" ] || [ "${DEVICE}" == "n418" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-1264x1680.qss "${extension_mountpoint}/etc/eink.qss"
	else
		mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss "${extension_mountpoint}/etc/eink.qss"
	fi
}

# Argument without / at the end
# If the second argument is "gui", it will bind-mount starting from /kobo
bind_mount_wrapper() {
	mount_start=""
	if [ "${2}" = "gui" ]; then
		mount_start="/kobo"
	fi
	mkdir -p "${extension_mountpoint}${1}"  || die "Failed to create '${extension_mountpoint}${1}'" 1
	mount --bind "${mount_start}${1}" "${extension_mountpoint}${1}" || die "Failed to bind-mount path: '${mount_start}${1}' at '${extension_mountpoint}${1}'" 1
}

start() {
	einfo "Setting up GUI user applications"
	DEVICE="$(cat /opt/inkbox_device)"
	[ ! -d "/data/onboard/.apps" ] && mkdir -p "/data/onboard/.apps"

	# If developer mode is enabled, bypass OpenSSL digital signature verification
	devmode="$(cat /opt/developer/key/valid-key 2>/dev/null)"
	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_mount" > /run/initrd-fifo
		sleep 0.5
	fi

	# Iterate through '[onboard-storage]/.apps' and detect '.isa' packages
	for f in /data/onboard/.apps/*/*.isa; do
		if [ "${f}" != "/data/onboard/.apps/*/*.isa" ]; then
			if openssl dgst -sha256 -verify /opt/key/applications-public.pem -signature "${f}.dgst" "${f}" &>/dev/null; then
				# Basics
				extension_archive="${f}"
				extension_name="$(basename -s '.isa' ""${extension_archive}"")"
				extension_json_file_descriptor="/data/onboard/.apps/${extension_name}/app.json"
				extension_mountpoint="/data/onboard/.apps/${extension_name}/${extension_name}"
				extension_userdata_path="/data/onboard/.apps-data/${extension_name}"
				[ ! -d "${extension_mountpoint}" ] && mkdir -p "${extension_mountpoint}"
				squashfuse -o allow_other,nosuid "${extension_archive}" "${extension_mountpoint}" || die "Failed to mount GUI user application archive '${extension_archive}' at '${extension_mountpoint}'" 1

				#### chroot requirements
				## Required features
				required_features="$(jq -r '.[].RequiredFeatures |= join(" ")|.[].RequiredFeatures' ""${extension_json_file_descriptor}"")"

				# https://inkbox.ddns.net/wiki/index.php?title=InkBox_GUI_user_apps
				# Somehow, these values persist between the `for` loops
				reqf_wifi_connection=0
				reqf_root_kernel=0
				reqf_pseudoterminal_support=0
				reqf_input_devices_support=0
				reqf_rotation_control=0
				reqf_debugfs=0
				reqf_onboard_storage_access=0
				reqf_audio=0
				reqf_onboard_storage_access_extra=0

				for feature in ${required_features}; do
					if [ "${feature}" == "0" ]; then
						# Needs Wi-Fi connection
						reqf_wifi_connection=1
					elif [ "${feature}" == "1" ]; then
						# Needs rooted kernel
						reqf_root_kernel=1
					elif [ "${feature}" == "2" ]; then
						# Needs '/dev/{pts/,ptmx}' (e.g. for terminal emulators)
						reqf_pseudoterminal_support=1
					elif [ "${feature}" == "3" ]; then
						# Access to all input devices
						reqf_input_devices_support=1
					elif [ "${feature}" == "4" ]; then
						# Brightness control
						reqf_brightness_control=1
					elif [ "${feature}" == "5" ]; then
						# Rotation
						reqf_rotation_control=1
					elif [ "${feature}" == "6" ]; then
						# DebugFS
						reqf_debugfs=1
					elif [ "${feature}" == "7" ]; then
						# Onboard storage access
						reqf_onboard_storage_access=1
					elif [ "${feature}" == "8" ]; then
						# Audio socket access
						reqf_audio=1
					elif [ "${feature}" == "9" ]; then
						# Onboard storage access - extra
						reqf_onboard_storage_access_extra=1
					fi
				done

				## Filesystems
				[ ! -d "/data/onboard/.apps-data" ] && mkdir -p "/data/onboard/.apps-data"
				[ ! -d "${extension_userdata_path}" ] && mkdir -p "${extension_userdata_path}"
				# mount -t sysfs sysfs -o nosuid "${extension_mountpoint}/sys" || die "Failed to mount sys filesystem at '${extension_mountpoint}/sys'." 1
				mount -t tmpfs tmpfs -o size=512K,nosuid "${extension_mountpoint}/sys" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/sys'." 1

				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/dev" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/dev'." 1
				mount -t tmpfs tmpfs -o size=128K,nosuid "${extension_mountpoint}/etc" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/etc'." 1
				mount -t tmpfs tmpfs -o size=32M,nosuid "${extension_mountpoint}/app-temp" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/app-temp'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/system-lib" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/system-lib'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/system-bin" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/system-bin'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/mnt" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/mnt'." 1
				# Timezone information & libinput
				mount -t tmpfs tmpfs -o size=512K,nosuid "${extension_mountpoint}/usr" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/usr'." 1

				## lib
				(mkdir -p "${extension_mountpoint}/system-lib/lib" && mount --bind "/kobo/lib" "${extension_mountpoint}/system-lib/lib" && mkdir -p "${extension_mountpoint}/system-lib/qt" && mount --rbind "/kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo/" "${extension_mountpoint}/system-lib/qt" && chmod 555 "${extension_mountpoint}/system-lib" "${extension_mountpoint}/system-lib/lib") || die "Failed to bind-mount system libraries at '${extension_mountpoint}/system-lib'." 1
				## bin
				(touch "${extension_mountpoint}/system-bin/busybox" && mount --bind "/bin/busybox" "${extension_mountpoint}/system-bin/busybox" && chroot "${extension_mountpoint}" "/system-bin/busybox" "--install" "-s" "/system-bin") || die "Failed to bind-mount and/or set up temporary BusyBox binary at '${extension_mountpoint}/system-bin/busybox'." 1
				## etc
				(echo "user:0ks1aDZQB18uk:1000:1000:user:/:/system-bin/sh" > "${extension_mountpoint}/etc/passwd" && echo "user:x:1000:" > "${extension_mountpoint}/etc/group" && echo "/system-bin/sh" > "${extension_mountpoint}/etc/shells" && touch "${extension_mountpoint}/etc/eink.qss" && bind_mount_stylesheet && touch "${extension_mountpoint}/etc/resolv.conf" && mount --bind "/etc/resolv.conf" "${extension_mountpoint}/etc/resolv.conf") || die "Failed to set up restricted authentication profile at '${extension_mountpoint}/etc'." 1
				# Wi-Fi connection (SSL certificates)
				if [ "${reqf_wifi_connection}" == 1 ]; then
					(mkdir -p "${extension_mountpoint}/etc/ssl" && mount --bind "/etc/ssl" "${extension_mountpoint}/etc/ssl") || die "Failed to bind-mount host's SSL certificates at '${extension_mountpoint}/etc/ssl/certs'." 1
				fi
				## dev
				# urandom
				(mknod "${extension_mountpoint}/dev/urandom" c 1 9 && chown user:user "${extension_mountpoint}/dev/urandom") || die "Failed to set up '${extension_mountpoint}/dev/urandom' device node." 1
				# Framebuffer
				(mknod "${extension_mountpoint}/dev/fb0" c 29 0 && chown user:user "${extension_mountpoint}/dev/fb0") || die "Failed to set up '${extension_mountpoint}/dev/fb0' device node." 1
				# Input
				mkdir -p "${extension_mountpoint}/dev/input" || die "Failed to create '${extension_mountpoint}/dev/input' directory." 1
				if [ "${reqf_input_devices_support}" == 1 ]; then
					bind_mount_wrapper "/dev/input"

					# strace requires it
					bind_mount_wrapper "/sys/dev/char"
					chmod -R 707 "${extension_mountpoint}/sys/dev/char" || die "Failed to chmod 707 '${extension_mountpoint}/sys/dev/char'." 1

					# Also needed because /sys/dev/char points to those devices
					bind_mount_wrapper "/sys/devices"
					chmod -R 707 "${extension_mountpoint}/sys/devices" || die "Failed to chmod 707 '${extension_mountpoint}/sys/devices'." 1

					# These for getting devices to start
					bind_mount_wrapper "/sys/bus"
					chmod -R 707 "${extension_mountpoint}/sys/bus" || die "Failed to chmod 707 '${extension_mountpoint}/sys/bus'." 1

					bind_mount_wrapper "/sys/class"
					chmod -R 707 "${extension_mountpoint}/sys/class" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class'." 1

					# libinput requires this too; important, it's from gui_rootfs
					bind_mount_wrapper "/usr/local/share" "gui"
					chmod -R 705 "${extension_mountpoint}/usr"

					mount -t tmpfs tmpfs -o size=512K,nosuid "${extension_mountpoint}/run" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/run'." 1
					bind_mount_wrapper "/run/udev"
					chmod -R 707 "${extension_mountpoint}/run/udev" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class'." 1

					echo "input:x:23:user" >> "${extension_mountpoint}/etc/group" || die "Failed to add 'input' group at ${extension_mountpoint}/etc/group" 1
				else
					if [ "${DEVICE}" == "n249" ]; then
						# cf. https://github.com/Kobo-InkBox/inkbox-os-init/commit/f09f9714cd7eb2aaa93b045fd61c32f26ef068db
						EVENT0_MINOR=65
						EVENT1_MINOR=64
						mknod "${extension_mountpoint}/dev/input/event0" c 13 "${EVENT0_MINOR}"
						mknod "${extension_mountpoint}/dev/input/event1" c 13 "${EVENT1_MINOR}"
						mknod "${extension_mountpoint}/dev/input/event2" c 13 66
					else
						for input_node in /dev/input/event*; do
							touch "${extension_mountpoint}/dev/input/$(basename ${input_node})"
							mount --bind "/dev/input/$(basename ${input_node})" "${extension_mountpoint}/dev/input/$(basename ${input_node})"
						done
					fi
					chown -R user:user "${extension_mountpoint}/dev/input/" || die "Failed to set up device input nodes at '${extension_mountpoint}/dev/input'." 1
				fi
				chmod -R 777 "${extension_mountpoint}/dev/input/" || die "Failed to chmod 777 '${extension_mountpoint}/dev/input/'." 1
				# ptmx/pts
				if [ "${reqf_pseudoterminal_support}" == 1 ]; then
					(mknod "${extension_mountpoint}/dev/tty" c 5 0 && chown user:user "${extension_mountpoint}/dev/tty" && mknod "${extension_mountpoint}/dev/ptmx" c 5 2 && chown user:user "${extension_mountpoint}/dev/ptmx" && mkdir -p "${extension_mountpoint}/dev/pts" && mount -t devpts devpts -o nosuid,noexec "${extension_mountpoint}/dev/pts") || die "Failed to set up pseudoterminal support at '${extension_mountpoint}/dev'." 1
				fi
				# Brightness
				if [ "${reqf_brightness_control}" == 1 ]; then
					# ntx_io will not be used because it has more access than brightness. Let's go with native interfaces
					# TODO: add other devices
					if [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n437" ]; then
						bind_mount_wrapper "/sys/class/backlight/mxc_msp430_fl.0/"
						chmod -R 707 "${extension_mountpoint}/sys/class/backlight/mxc_msp430_fl.0/" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class/backlight/mxc_msp430_fl.0/'." 1
					elif [ "${DEVICE}" == "n249" ]; then
						bind_mount_wrapper "/sys/class/backlight/backlight_cold/"
						bind_mount_wrapper "/sys/class/backlight/backlight_warm/"
						chmod -R 707 "${extension_mountpoint}/sys/class/backlight/backlight_cold/" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class/backlight/backlight_cold/'." 1
						chmod -R 707 "${extension_mountpoint}/sys/class/backlight/backlight_warm/" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class/backlight/backlight_warm/'." 1
					else
						bind_mount_wrapper "/sys/class/backlight/mxc_msp430.0/"
						chmod -R 707 "${extension_mountpoint}/sys/class/backlight/mxc_msp430.0/" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class/backlight/mxc_msp430.0/'." 1
					fi
				fi
				# Rotation
				if [ "${reqf_rotation_control}" == 1 ]; then
					bind_mount_wrapper "/sys/class/graphics/fb0"
					chmod 707 "${extension_mountpoint}/sys/class/graphics/fb0/rotate" || die "Failed to chmod 707 '${extension_mountpoint}/sys/class/graphics/fb0/rotate'." 1
				fi
				# debugfs
				if [ "${reqf_debugfs}" == 1 ]; then
					mkdir -p "${extension_mountpoint}/sys/kernel/debug"
					mount -t debugfs none "${extension_mountpoint}/sys/kernel/debug" || die "Failed to mount debug filesystem at '${extension_mountpoint}/sys/kernel/debug'." 1
					chmod -R 707 "${extension_mountpoint}/sys/kernel/debug" || die "Failed to chmod 707 '${extension_mountpoint}/sys/kernel/debug'." 1
				fi
				# Onboard storage access
				if [ "${reqf_onboard_storage_access_extra}" == 1 ]; then
					mount --rbind "/data/onboard" "${extension_mountpoint}/system-onboard" || die "Failed to mount system onboard storage - extra at '${extension_mountpoint}/system-onboard'." 1
				else
					if [ "${reqf_onboard_storage_access}" == 1 ]; then
						mount --bind "/data/onboard" "${extension_mountpoint}/system-onboard" || die "Failed to mount system onboard storage at '${extension_mountpoint}/system-onboard'." 1
					fi
				fi
				# Audio
				if [ "${reqf_audio}" == 1 ]; then
					touch "${extension_mountpoint}/dev/iaudio.socket"
					mount --bind "/dev/iaudio.socket" "${extension_mountpoint}/dev/iaudio.socket" || die "Failed to bind-mount '/dev/iaudio.socket' at '${extension_mountpoint}/dev/iaudio.socket'." 1
					chmod 777 "${extension_mountpoint}/dev/iaudio.socket"
					mkdir -p "${extension_mountpoint}/mnt/onboard/onboard/music"
					chown -R user:user "${extension_mountpoint}/mnt/onboard/onboard/music"
					mount --rbind "/data/onboard/music/" "${extension_mountpoint}/mnt/onboard/onboard/music"
					chown -R user:user "${extension_mountpoint}/mnt/onboard/onboard/music"
				fi
				# Power daemon
				(mkdir -p "${extension_mountpoint}/dev/ipd" && touch "${extension_mountpoint}/dev/ipd/fifo" && mount --bind "/run/ipd/fifo" "${extension_mountpoint}/dev/ipd/fifo") || die "Failed to bind-mount InkBox Power Daemon (ipd) named pipe" 1
				# /dev/null
				touch "${extension_mountpoint}/dev/null" && mount --bind "/dev/null" "${extension_mountpoint}/dev/null" || die "Failed to bind-mount '/dev/null' at '${extension_mountpoint}/dev/null'." 1
				# Remount /dev read-only
				mount -o remount,ro "${extension_mountpoint}/dev" || die "Failed to remount '${extension_mountpoint}/dev' read-only." 1

				## mnt
				(mkdir -p "${extension_mountpoint}/mnt/onboard/.kobo" && mount --bind "/kobo/mnt/onboard/.kobo/version" "${extension_mountpoint}/mnt/onboard/.kobo/version" > "${extension_mountpoint}/mnt/onboard/.kobo/version" && mount -o remount,ro "${extension_mountpoint}/mnt") || die "Failed to set up fake onboard filesystem for FBInk." 1
				## Time zone
				# Mount from gui because inkbox_gui script manages config files for it
				bind_mount_wrapper "/usr/share/zoneinfo/" "gui"
				touch "${extension_mountpoint}/etc/localtime"
				mount --bind "/kobo/etc/localtime" "${extension_mountpoint}/etc/localtime"
				## Restrict /etc
				(mount -o remount,ro "${extension_mountpoint}/etc") || die "Failed to remount '${extension_mountpoint}/etc' read-only." 1

				## ITerm
				if [ "${extension_name}" == "ITerm" ]; then
					iterm_extensions_path="${extension_userdata_path}/extensions"
					if [ "$(ls -A ""${iterm_extensions_path}"" 2>/dev/null)" ]; then
						for iterm_extension in ${iterm_extensions_path}/*; do
							if [ "${iterm_extension}" != "${iterm_extensions_path}/*" ]; then
								iterm_extension_path="${iterm_extension}"
								iterm_extension_mountpoint="${iterm_extensions_path}/$(basename -s '.isa' ""${iterm_extension}"")"
								if [ -f "${iterm_extension_path}" ]; then
									mkdir -p "${iterm_extension_mountpoint}"
									squashfuse -o allow_other,nosuid,nodev "${iterm_extension_path}" "${iterm_extension_mountpoint}"
								fi
							else
								continue
							fi
						done
					fi
				fi

				## User data
				(mount --rbind "${extension_userdata_path}" "${extension_mountpoint}/app-data" && chown user:user "${extension_mountpoint}/app-data") || die "Failed to bind-mount user data directory '${extension_userdata_path}' at '${extension_mountpoint}/app-data'." 1

				einfo "Successfully set up application '${extension_name}'"
			else
				ewarn "GUI user application '${f}''s digital signature is invalid!"
			fi
		fi
	done

	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_unmount" > /run/initrd-fifo
		sleep 0.5
	fi

	sleep 0.5
	mount --rbind /data/onboard /kobo/mnt/onboard/onboard
	mount --rbind /data/onboard /kobo/external_root/data/onboard
	eend $?
}

die() {
	if [ -z "${1}" ]; then
		error_message="Unknown error"
	else
		error_message="${1}"
	fi
	if [ -z "${2}" ]; then
		error_code=1
	else
		error_code=${2}
	fi

	devmode="$(cat /opt/developer/key/valid-key 2>/dev/null)"
	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_unmount" > /run/initrd-fifo
	fi

	eerror "${error_message}"
	eend ${error_code}
}

stop() {
	sync

	# We use more paths than those below, so adding that - those below stay just to be sure
	findmnt -l -o TARGET | grep .apps | awk '{ print length, $0 }' | sort -r | sort -n | tac | cut -d " " -f2- | xargs umount {} 2>/dev/null

	umount -l -f /kobo/mnt/onboard/onboard/.apps-data/*/* 2>/dev/null
	umount -l -f /kobo/mnt/onboard/onboard/.apps-data/ITerm/extensions/* 2>/dev/null
	umount -l -f /kobo/mnt/onboard/onboard/.apps/*/* 2>/dev/null

	umount -l -f /kobo/external_root/data/onboard/.apps-data/*/* 2>/dev/null
	umount -l -f /kobo/external_root/data/onboard/.apps-data/ITerm/extensions/* 2>/dev/null
	umount -l -f /kobo/external_root/data/onboard/.apps/*/* 2>/dev/null

	umount -l -f /data/onboard/.apps-data/*/* 2>/dev/null
	umount -l -f /data/onboard/.apps-data/ITerm/extensions/* 2>/dev/null
	umount -l -f /data/onboard/.apps/*/* 2>/dev/null
	return 0
}
